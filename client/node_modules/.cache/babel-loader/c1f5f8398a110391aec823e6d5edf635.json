{"ast":null,"code":"import _defineProperty from \"/home/mmackre/React/concerts/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/mmackre/React/concerts/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/mmackre/React/concerts/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/mmackre/React/concerts/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/mmackre/React/concerts/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/mmackre/React/concerts/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/mmackre/React/concerts/src/components/showList.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { addShow, getShows, deleteShow, updateShow } from '../actions';\nimport musicNote from \"../images/music.png\";\nimport edit from \"../images/edit1.png\";\nimport trash from \"../images/delete.png\";\nimport check from \"../images/check.png\";\nimport Show from './show';\n\nvar ShowList =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ShowList, _React$Component);\n\n  function ShowList() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ShowList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ShowList)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      song: '',\n      modalOpen: false,\n      editable: false\n    };\n    return _this;\n  }\n\n  _createClass(ShowList, [{\n    key: \"renderList\",\n    value: function renderList() {\n      return this.props.shows.map(function (show) {\n        var _React$createElement;\n\n        return React.createElement(Show, (_React$createElement = {\n          name: show.showName,\n          venue: show.venue,\n          date: show.date,\n          id: show.showId,\n          time: show.time\n        }, _defineProperty(_React$createElement, \"id\", show.showId), _defineProperty(_React$createElement, \"__source\", {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        }), _defineProperty(_React$createElement, \"__self\", this), _React$createElement));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var inputBand, inputVenue, inputDate, inputTime;\n      var selectedConcert = this.props.selectedShow;\n      var editBand, editVenue, editDate, editTime;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"listH\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, \"Concert Tracker\")), React.createElement(\"div\", {\n        className: \"mainDiv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, this.state.modalOpen ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"transparentBackground\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }), React.createElement(\"form\", {\n        autocomplete: \"off\",\n        className: \"cssGridForm\",\n        onSubmit: function onSubmit(e) {\n          e.preventDefault();\n\n          _this2.props.addShow(inputBand.value, inputVenue.value, inputDate.value, inputTime.value);\n          /*  this.setState({modalOpen:})*/\n\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"band\",\n        type: \"text\",\n        name: \"show\",\n        placeholder: \"Band\",\n        ref: function ref(node) {\n          return inputBand = node;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        className: \"date\",\n        type: \"date\",\n        name: \"date\",\n        placeholder: \"Date\",\n        ref: function ref(node) {\n          return inputDate = node;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        className: \"venue\",\n        type: \"text\",\n        name: \"venue\",\n        placeholder: \"Venue\",\n        ref: function ref(node) {\n          return inputVenue = node;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        className: \"time\",\n        type: \"text\",\n        name: \"time\",\n        placeholder: \"Time\",\n        ref: function ref(node) {\n          return inputTime = node;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"defaultButton\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"Add show\"), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.setState({\n            modalOpen: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"close the modal\"))) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }), React.createElement(ShowDetails, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"showList\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Upcoming Shows\"), React.createElement(\"div\", {\n        className: \"list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, this.renderList()))), React.createElement(\"div\", {\n        className: \"footer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.setState({\n            modalOpen: true\n          });\n        },\n        className: \"newItemButton\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"+\"))));\n    }\n  }]);\n\n  return ShowList;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    shows: state.showData.showList,\n    selectedShow: state.showData.selected\n  };\n};\n\nexport default connect(mapStateToProps, {\n  addShow: addShow,\n  getShows: getShows,\n  deleteShow: deleteShow,\n  updateShow: updateShow\n})(ShowList);","map":{"version":3,"sources":["/home/mmackre/React/concerts/src/components/showList.js"],"names":["React","connect","addShow","getShows","deleteShow","updateShow","musicNote","edit","trash","check","Show","ShowList","state","song","modalOpen","editable","props","shows","map","show","showName","venue","date","showId","time","inputBand","inputVenue","inputDate","inputTime","selectedConcert","selectedShow","editBand","editVenue","editDate","editTime","e","preventDefault","value","node","setState","renderList","Component","mapStateToProps","showData","showList","selected"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { addShow, getShows, deleteShow, updateShow } from '../actions';\nimport musicNote from \"../images/music.png\";\nimport edit from \"../images/edit1.png\";\nimport trash from \"../images/delete.png\";\nimport check from \"../images/check.png\";\n\nimport Show from './show';\n\nclass ShowList extends React.Component {\n\n    state = { song: '', modalOpen: false, editable: false};\n\n    renderList() {\n        return this.props.shows.map((show) => \n            <Show name={show.showName} venue={show.venue} date={show.date} id={show.showId} time={show.time} id={show.showId}></Show>\n        ); \n    }\n\n    \n    render() {\n        let inputBand, inputVenue, inputDate, inputTime;\n\n        let selectedConcert = this.props.selectedShow;\n        let editBand, editVenue, editDate, editTime;\n\n        return (\n\n            <div>\n\n\n                <div className=\"header\">\n                    <h1 className=\"listH\">Concert Tracker</h1>\n                \n                </div>\n\n\n                <div className=\"mainDiv\">\n\n                    {this.state.modalOpen ? \n                    <div>  \n                        <div className=\"transparentBackground\"/>  \n        \n                        <form autocomplete=\"off\" className=\"cssGridForm\" onSubmit={(e) => {\n                            e.preventDefault();\n                            this.props.addShow(inputBand.value, inputVenue.value, inputDate.value, inputTime.value);\n                        /*  this.setState({modalOpen:})*/}\n                        }>\n                            <input className=\"band\"\n                            type=\"text\"\n                            name=\"show\"\n                            placeholder=\"Band\"\n                            ref={node => inputBand = node} />\n                            \n                            <input className=\"date\"\n                            type=\"date\"\n                            name=\"date\"\n                            placeholder=\"Date\"\n                            ref={node => inputDate = node}/>\n\n                            <input className=\"venue\"\n                            type=\"text\"\n                            name=\"venue\"\n                            placeholder=\"Venue\"\n                            ref={node => inputVenue = node}/>\n\n                            <input className=\"time\"\n                            type=\"text\"\n                            name=\"time\"\n                            placeholder=\"Time\"\n                            ref={node => inputTime = node}/>\n\n                            <button  type=\"submit\" className=\"defaultButton\"\n                            >Add show</button>\n\n                            <button  onClick={() => this.setState({modalOpen: false})} \n                            >close the modal</button>\n                    \n                        </form>\n                    </div>   \n\n                    :<div></div>}\n                        <ShowDetails>\n\n                        </ShowDetails>\n                        \n                    \n                        <div className=\"showList\">\n                            <h1>Upcoming Shows</h1>\n                            <div className=\"list\">\n                                {this.renderList()}\n                            </div>\n                        </div>\n\n                </div>\n\n                <div className=\"footer\">\n                    <button onClick={() => this.setState({modalOpen: true})} className=\"newItemButton\"><p>+</p></button>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return { shows: state.showData.showList,\n             selectedShow: state.showData.selected };\n}\n\nexport default connect(mapStateToProps, {addShow, getShows, deleteShow, updateShow})(ShowList);\n\n"]},"metadata":{},"sourceType":"module"}